{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1ZZaasCbEztB15g1vYhZSVE39I2QjjZt7","authorship_tag":"ABX9TyPLol7d3Ye1ndkoQ19h5fSr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["**Name:** Tarun Kumar Reddy </br>\n","**School:** Computing and Data Science </br>\n","**Email Address:** tarun.g-25@scds.saiuniversity.edu.in"],"metadata":{"id":"tmC-FDp3jwwy"}},{"cell_type":"markdown","source":["## Importing Libraries"],"metadata":{"id":"HjxeLoCKcUob"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"tIyvEuH-vBSo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1703783077834,"user_tz":-330,"elapsed":5393,"user":{"displayName":"Tarun Kumar Reddy","userId":"06186965699569836560"}},"outputId":"fbcac4c9-ce31-4768-f42a-5292eed5ebff"},"outputs":[{"output_type":"stream","name":"stdout","text":["2.15.0\n"]}],"source":["import tensorflow as tf\n","print(tf.__version__)\n","\n","from tensorflow import keras\n","tf.random.set_seed(42)\n","\n","import numpy as np\n","np.random.seed(42)\n","\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","import glob\n","import PIL\n","from PIL import Image"]},{"cell_type":"markdown","source":["## Loading the Data\n","Loading pre-processed data from the GDrive"],"metadata":{"id":"WFWEUs9JcaOQ"}},{"cell_type":"code","source":["from numpy import load\n","\n","X_train_std = load('/content/drive/MyDrive/Deep_Learning_Final_Project/X_train_std.npy')\n","X_test_std = load('/content/drive/MyDrive/Deep_Learning_Final_Project/X_test_std.npy')\n","y_train = load('/content/drive/MyDrive/Deep_Learning_Final_Project/y_train.npy')\n","y_test = load('/content/drive/MyDrive/Deep_Learning_Final_Project/y_test.npy')"],"metadata":{"id":"tNYk6pjVsERD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Loading the DenseNet201 model and taking only the feature extractor"],"metadata":{"id":"4d-xfAqRgkGc"}},{"cell_type":"code","source":["print(\"X_train_std_shape: {}\".format(X_train_std.shape))\n","print(\"X_test_std_shape: {}\".format(X_test_std.shape))"],"metadata":{"id":"VAgjzNvYEOGS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model2_TL = keras.applications.DenseNet201(weights='imagenet',\n","                                                  include_top=False)\n","\n","\n","# Visualize the extractor part for transfer learning\n","tf.keras.utils.plot_model(\n","    model2_TL,\n","    to_file='model1_TL.png',\n","    show_shapes=False,\n","    show_layer_names=False,\n","    rankdir='TB',\n","    expand_nested=False,\n","    dpi=96\n",")"],"metadata":{"id":"oMJnee43psAG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Freezing the weights of the feature extractor"],"metadata":{"id":"2Xr4_GE5L01t"}},{"cell_type":"code","source":["# Weights will not be updated during backpropagation\n","for layer in model2_TL.layers:\n","  layer.trainabe = False"],"metadata":{"id":"X2sgFjSYqOhI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Adding a Classifier"],"metadata":{"id":"-PH0vYX2OIKF"}},{"cell_type":"code","source":["# Adding classifier\n","\n","global_pool = keras.layers.GlobalAveragePooling2D()(model2_TL.output)\n","x = keras.layers.BatchNormalization()(global_pool)\n","x = keras.layers.Dropout(rate = 0.35)(x)\n","output_ = keras.layers.Dense(units=4, activation='softmax')(x)\n","\n","model2_TL = keras.models.Model(inputs=[model2_TL.input], outputs=[output_])\n","\n","# Visualize the complete model\n","tf.keras.utils.plot_model(\n","    model2_TL,\n","    to_file='Model_TL.png',\n","    show_shapes=False,\n","    show_layer_names=False,\n","    rankdir='LR',\n","    expand_nested=False,\n","    dpi=96\n",")"],"metadata":{"id":"VsshNubmqTWR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model2_TL.compile(loss='sparse_categorical_crossentropy',\n","                 optimizer='adam',\n","                 metrics=['accuracy'])\n","\n","callbacks_model2_TL = [\n","             keras.callbacks.ModelCheckpoint(\"model2_TL.h5\",\n","                                             monitor='val_accuracy',\n","                                             save_weights_only=True,\n","                                             save_best_only=True)]\n","\n","history_TL = model2_TL.fit(x = X_train_std, y = y_train, epochs=20,\n","                          validation_split=0.1, batch_size=32, callbacks=callbacks_model2_TL)"],"metadata":{"id":"co-QDkp5qZDv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["keys = ['accuracy', 'val_accuracy']\n","progress = {k:v for k,v in history_TL.history.items() if k in keys}\n","\n","import pandas as pd\n","pd.DataFrame(progress).plot()\n","\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"accuracy\")\n","\n","plt.grid(True)\n","plt.show()"],"metadata":{"id":"dNODZGTalUvF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Loading the best weights"],"metadata":{"id":"ehN4Z9dsOYPE"}},{"cell_type":"code","source":["model2_TL.load_weights(\"model2_TL.h5\")\n","testLoss_model21 , testAccuracy_model21 = model2_TL.evaluate(x = X_test_std, y = y_test)\n","print(\"Test-loss: %f, Test-accuracy: %f\" % (testLoss_model21, testAccuracy_model21))"],"metadata":{"id":"eRIsRHTlrCbH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cProba = model2_TL.predict(X_test_std[:1])\n","print(cProba)"],"metadata":{"id":"cfaIC9UP9vj2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_test[:1]"],"metadata":{"id":"1wfpVZ1p-XW3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cLabel = np.argmax(cProba, axis=-1)\n","print(cLabel)"],"metadata":{"id":"0VVXWozH-NbN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model2_TL.save(\"/content/drive/MyDrive/Deep_Learning_Final_Project/model2_TL.h5\")"],"metadata":{"id":"3wSuJ_AsWKhf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model2_TL = keras.models.load_model('/content/drive/MyDrive/Deep_Learning_Final_Project/model2_TL.h5')"],"metadata":{"id":"fNgxSljcQSAZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn import metrics\n","predicted = model2_TL.predict(X_test_std)\n","predicted_class = np.argmax(predicted, axis=1)\n","\n","print(\"Classification report for classifier %s:\\n%s\\n\"\n","% (model2_TL, metrics.classification_report(y_test, predicted_class)))\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import ConfusionMatrixDisplay\n","confMatrix = confusion_matrix(y_true = y_test, y_pred = predicted_class)\n","disp = ConfusionMatrixDisplay(confusion_matrix = confMatrix)\n","disp.plot()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":692},"id":"8S9QIJXfQjwP","executionInfo":{"status":"ok","timestamp":1703783195131,"user_tz":-330,"elapsed":48937,"user":{"displayName":"Tarun Kumar Reddy","userId":"06186965699569836560"}},"outputId":"181aa004-d8b8-45e9-add3-7e4975155397"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4/4 [==============================] - 31s 4s/step\n","Classification report for classifier <keras.src.engine.functional.Functional object at 0x79c51ba36530>:\n","              precision    recall  f1-score   support\n","\n","           0       0.58      0.58      0.58        26\n","           1       0.60      0.18      0.28        33\n","           2       0.60      0.86      0.71        21\n","           3       0.69      0.89      0.78        47\n","\n","    accuracy                           0.64       127\n","   macro avg       0.62      0.63      0.58       127\n","weighted avg       0.63      0.64      0.60       127\n","\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]}]}